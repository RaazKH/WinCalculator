 // print result


            /**
            for (int i = 0; i < len; i++)
            {
                char a = eval[i];
                if (a == '/' || a == '*' || a == '+' || a == '-')
                {
                    // store temp in the string array and store the operator in the next position
                    // increment array pos by 2
                }

            }**/






            // check for valid characters
            // 40 = (
            // 41 = )
            // 42 = *
            // 43 = +
            // 44 = , IGNORE
            // 45 = -
            // 46 = .
            // 47 = /
            // 48-57 = 0-9 
            // 120 = x
            // 247 = รท
            /**
            for (int i = 0; i < len; i++)
            {
                int a = (int)eval[i];
                if ((a >= 40 && a < 44) || (a > 44 && a <= 57))
                {
                    // valid
                }
                else
                {
                    Debug.WriteLine("Invalid character:" + a);
                    return;
                }
                
            }
            **/








            // need this too for some reason
            //this.Loaded += delegate { this.Focus(FocusState.Programmatic); };

            // initializes keyboard input on app startup
            // without this a button will need to be hit on the screen before keyboard works
            //this.Loaded += delegate { this.Focus(FocusState.Keyboard); };




//string temp = "";
            //List<string> operation = new List<string>();
            //int pos = 0;



            // validate the expression 
            // - Are the () balanced
            // - Are the operators entered correctly
            // - Are there too many . in a number


            /**
           
            foreach (char a in eval)
            {
                if(a == '(')
                {
                    if (temp.Length > 0)
                    {
                        // insert multiplication
                    }
                }
                else if (a == '/' || a == '*' || a == '+' || a == '-') // add ()
                {
                    operation[pos] = temp;
                    
                    operation[pos + 1] = ""+a;

                    pos = pos + 2;
                    temp = "";
                }
                else
                {
                    temp += a;
                }
            }
            // check if temp length is > 0?
            operation[pos] = temp;

            // Step 1.1: Debug step
            foreach (string a in operation)
            {
                Debug.WriteLine(a);
            }


            // Step 2: Validate
            double num = Convert.ToDouble(operation[0]);
            for (int i = 0; i < operation.Count; i++)
            {
                if (operation[i] == null)
                    break;

                if (i % 2 != 0)
                {
                    if (operation[i] == "+")
                    {
                        num += Convert.ToDouble(operation[i + 1]);
                    }
                    else if (operation[i] == "*")
                    {
                        num *= Convert.ToDouble(operation[i + 1]);
                    }
                    else if (operation[i] == "/")
                    {
                        num /= Convert.ToDouble(operation[i + 1]);
                    }
                    else if (operation[i] == "-")
                    {
                        num -= Convert.ToDouble(operation[i + 1]);
                    }
                }
            }
             **/



12.1 + (4 - 3) * 32.5 - (55 * 6) + 6

12.1
(4 - 3)
*
32.5
-
(55*6)
+
6

((


Eval object
string e(contains string)
object.balanced() boolean
object.decimals() boolean
object.isvalid


Backspace 8
Enter 13
( 40
) 41
* 42
+ 43
- 45
. 46
/ 47
0 48
1 49
2 50
3 51
4 52
5 53
6 54
7 55
8 56
9 57
Delete? Doesn't work








